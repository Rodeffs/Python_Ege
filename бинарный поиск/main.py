# Бинарный поиск применяется для быстрого поиска числа в списке.
# Его суть состоит в том, что мы делим список пополам и сравниваем его число посередине с искомым числом.
# На протяжении всей программы мы работаем именно с индексами и меняем только их.
# mid - число посередине списка
# low - нижнее (меньшее) значение списка
# high - максимальное значение списка
# В зависимости от того, больше ли искомое число числа посередине или меньше, мы выбираем направление: если больше, то..
# ..тогда меньшее значение становится средним + 1, и всё, что меньше его больше не считается, а если меньше - то..
# ..большее значение становится средним - 1 и также, всё, что больше не идёт в счёт.
# В любом случае мы высчитываем новое среднее число, но только уже с новыми значениями low или high и цикл повторяется.
# Если искомого числа не нашли и меньшее значения съехало и стало больше большего, то возвращаем False, а если нашли -..
# ..то возвращаем индекс этого числа в списке.

""" ВАЖНО!!! СПИСОК ДОЛЖЕН БЫТЬ ОТСОРТИРОВАН, ИНАЧЕ ФУНКЦИЯ НЕ СРАБОТАЕТ!!! Для этого используется .sort()"""


def binary_search(value, list_of_numbers):
    mid = len(list_of_numbers) // 2
    low = 0
    high = len(list_of_numbers) - 1

    while list_of_numbers[mid] != value and low <= high:
        if value > list_of_numbers[mid]:
            low = mid + 1
        else:
            high = mid - 1
        mid = (low + high) // 2

    if low > high:
        return False
    else:
        return mid
